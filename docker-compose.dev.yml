services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/userprofiles-service/db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  kafka:
    image: bitnami/kafka:3.6
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CFG_NODE_ID: 1
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  localstack:
    image: localstack/localstack:3.0
    ports:
      - "4566:4566"
    environment:
      SERVICES: dynamodb,s3,secretsmanager,cognito-idp
      DEBUG: 1
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack_data:/var/lib/localstack
      - ./infrastructure/localstack:/etc/localstack/init/ready.d
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  auth-service:
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - ENV=development
      - REDIS_URL=redis://redis:6379/0
      - JWT_ISSUER=https://auth.example.com
      - JWT_AUDIENCE=cloud-app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  bff:
    build:
      context: .
      dockerfile: ./apps/bff/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - AUTHSVC_URL=http://auth-service:8083
      - USERPROFILES_URL=http://userprofiles-service:8081
      - USERSETTINGS_URL=http://usersettings-service:8082
    env_file:
      - .env
    depends_on:
      auth-service:
        condition: service_healthy
      userprofiles-service:
        condition: service_healthy
      usersettings-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  userprofiles-service:
    build:
      context: .
      dockerfile: ./apps/userprofiles-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - ENV=development
      - PG_DSN=postgresql://postgres:password@postgres:5432/appdb
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  usersettings-service:
    build:
      context: .
      dockerfile: ./apps/usersettings-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - ENV=development
      - DYNAMODB_ENDPOINT_URL=http://localstack:4566
      - DYNAMODB_TABLE_USER_SETTINGS=user_settings_dev
      - USERSETTINGS_MIGRATIONS_TABLE=usersettings_migrations_dev
    env_file:
      - .env
    depends_on:
      localstack:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  events-service:
    build:
      context: .
      dockerfile: ./apps/events-service/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - ENV=development
      - KAFKA_BROKERS=kafka:9092
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/web:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - auth-service
      - bff

volumes:
  postgres_data: {}
  redis_data: {}
  kafka_data: {}
  localstack_data: {}
